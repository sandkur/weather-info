{"version":3,"sources":["Components/ResultSearch.js","App.js","Router.js","serviceWorker.js","index.js"],"names":["ResultSearch","props","react_default","a","createElement","reactstrap_es","lg","className","city","country","temperature","humidity","windspeed","status","description","API_KEY","App","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","undefined","getWeather","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","nameCity","api_call","data","wrap","_context","prev","next","preventDefault","value","fetch","sent","json","console","log","setState","list","name","sys","main","temp","wind","speed","weather","addForm","reset","stop","_x","inherits","createClass","key","_this2","id","index_es","icon","onSubmit","ref","input","form","md","type","placeholder","block","ResultSearch_ResultSearch","fluid","sm","href","target","Component","library","add","faStroopwafel","faSearch","faCloudSun","Router","_React$Component","BrowserRouter","Switch","Route","path","component","exact","React","Boolean","window","location","hostname","match","ReactDOM","render","Router_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.501eb47d.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Card, CardBody, CardTitle, CardText } from 'reactstrap';\nexport const ResultSearch = (props) => (\n\t<Row>\n\t\t<Col lg='8' className='mx-auto'>\n\t\t\t<Card>\n\t\t\t\t<CardBody>\n\t\t\t\t\t<CardTitle> Location : \n\t\t\t\t\t\t{ props.city && props.country && <i> { props.city},  { props.country } </i> } \n\t\t\t\t\t</CardTitle> \n\t\t\t\t\t<CardTitle> Temperature : {props.temperature && <i> { props.temperature }Â°</i>}  </CardTitle> \n\t\t\t\t\t<CardTitle> Humidity : <i> { props.humidity } </i> </CardTitle> \n\t\t\t\t\t<CardTitle> Windspeed : <i> { props.windspeed } </i> </CardTitle> \n\t\t\t\t\t<CardTitle> Status : <i> { props.status } </i> </CardTitle> \n\t\t\t\t\t<CardTitle> Description : <i> { props.description } </i> </CardTitle> \n\t\t\t\t</CardBody>\n\t\t\t</Card>\n\t\t</Col>\n\t</Row>\n)","import React, { Component } from 'react';\nimport {ResultSearch} from './Components/ResultSearch';\nimport {Container, Row, Col, Card, CardBody, Button, FormGroup, NavLink } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst API_KEY = \"6cca5d9ad193e48a8fe2393bb7ce85d3\";\nconst API_URL = \"http://cors-anywhere.herokuapp.com/\";\n\nexport class App extends Component {\n  state = {\n    city: undefined,\n    country: undefined,\n    temperature: undefined,\n    humidity: undefined,\n    windspeed: undefined,\n    status: undefined,\n    description: undefined\n\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n    const nameCity = this.nameCity.value;\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/find?q=${nameCity}&units=metric&appid=${API_KEY}`);\n    const data = await api_call.json();\n    console.log(data);\n\n    this.setState({\n      city: data.list[0].name,\n      country: data.list[0].sys.country,\n      temperature: data.list[0].main.temp,\n      humidity: data.list[0].main.humidity,\n      windspeed: data.list[0].wind.speed,\n      status: data.list[0].weather[0].main,\n      description: data.list[0].weather[0].description\n    })\n\n    this.addForm.reset();\n  }\n  render() {\n    return (\n      <div id='wrap'>\n        <section className='weather-info'>\n          <Container>\n            <Row>\n              <Col lg='8' className='mx-auto'>\n                <div className='headingTitle'>\n                  <h1> \n                    <FontAwesomeIcon icon=\"cloud-sun\" />\n                    WeatherInfo \n                  </h1>\n                </div>\n                <Card className='mb-3'>\n                  <CardBody>\n                    <form onSubmit={(e) => (this.getWeather(e))} className='form' ref={(input) => (this.addForm) = input}>\n                      <Row form>\n                        <Col md='10'>\n                          <FormGroup>\n                            <input type='teks' className='form-control' ref={(input) => (this.nameCity) = input} placeholder=\"Type your city...\"/>\n                          </FormGroup>\n                        </Col>\n                        <Col md='2'>\n                          <FormGroup>\n                            <Button block> \n                              <FontAwesomeIcon icon=\"search\" />\n                            </Button>\n                          </FormGroup>\n                        </Col>\n                      </Row>\n                    </form>\n                  </CardBody>\n                </Card>\n              </Col>\n            </Row>\n            <ResultSearch \n              city={this.state.city}\n              country={this.state.country}\n              temperature={this.state.temperature}\n              humidity={this.state.humidity}\n              windspeed={this.state.windspeed}\n              status={this.state.status}\n              description={this.state.description}\n            />  \n          </Container>\n        </section>\n        <footer className=\"footer\">\n          <Container fluid>\n            <Row>\n              <Col lg='6' md='6' sm='6'>\n                <Card>\n                  <CardBody>\n                      <i> Copyright Â© </i>\n                      <a href=\"https://portofolio-sandy.firebaseapp.com/\" target=\"__blank\"> sandy kurniawan </a>\n                  </CardBody>\n                </Card>\n              </Col>\n              <Col lg='6' md='6' sm='6'>\n                <Card>\n                  <CardBody>\n                    <i> Powered: </i>\n                      <a href=\"https://openweathermap.org/\" target=\"__blank\"> openweathermap.org </a>\n                  </CardBody>\n                </Card>\n              </Col>\n            </Row>\n          </Container>\n        </footer>\n      </div>\n    );\n  }\n}\n\n","import React from 'react';\nimport {App} from './App';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { faStroopwafel, faSearch, faCloudSun } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faStroopwafel, faSearch, faCloudSun)\n\nexport class Router extends React.Component {\n\trender() {\n\t\treturn(\n\t\t\t<BrowserRouter>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path='/' component={App} exact />\n\t\t\t\t</Switch>\n\t\t\t</BrowserRouter>\n\t\t);\n\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Router} from './Router';\nimport './Styles/Css/main.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}